(*
Antiban
=======

The Antiban file includes functions & procedures that perform certain
actions in order to avoid being banned from Runescape.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Antiban.simba>`_.

*)

(*
MSI_MultiClickMouse
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_MultiClickMouse(x, y, maxClicks: integer);

Will simulate "spam" clicking on the point x, y.  Will do it a random amount
between 1 and 'maxClicks'.  Will click once no matter what, then has a 30%
chance of clicking again after that.  Will not exceed 'maxClicks'.

.. note::

  | Author: Coh3n
  | Last Updated: 09 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (waitUptext('ree', 200)) then
    MSI_MultiClickMouse(x, y, 5);
*)
procedure MSI_MultiClickMouse(x, y, maxClicks: integer);
var
  clicks, rX, rY: integer;
begin
  repeat
    inc(clicks);
    mouse(x, y, rX, rY, true);

    if (random(10) < 7) then
      break;

    rX := randomRange(1, 5);
    rX := randomRange(1, 5);
  until(clicks >= maxClicks);
end;

(*
MSI_Antiban
~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_Antiban(HowLong, ChancePerc: Integer);

Has a specified percentage chance (ChancePerc) of performing antiban
procedures for a specified length of time in milliseconds (HowLong)

.. note::

  | Author: Naum
  | Last Updated: 9 Febuary 2011 by NCDS

Example:

.. code-block:: pascal

  while (IsChopping) do
  begin
    MSI_Antiban(2000 + RandomRange(-1000, 1000), ANTI_BAN_CHANCE); // ANTI_BAN_CHANCE is a constant that can be found in Globals.simba
    Wait(RandomRange(500, 750));
  end;
*)
Procedure MSI_AntiBan(HowLong, ChancePerc: Integer);
Var
  RanTab, I, Time, _avg : Integer;
Begin
  if (not LoggedIn) then
    Exit;

  if (Random(100) > ChancePerc) or (NextAntiban > GetSystemTime) then
    Exit;

  _avg := Round(MSI_SetupVars[SETUP_ANTIBAN_WAIT] * (RANDOM_TIME_PERCENT + (RANDOM_TIME_PERCENT * 0.50)));
  NextAntiban := GetSystemTime + (MSI_SetupVars[SETUP_ANTIBAN_WAIT] + RandomRange(-Round(_avg / 2), _avg));

  MSI_SubDebug('MSI_AntiBan');
  if (MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name = SCRIPT_ALCHER) and (Random(100) > ChancePerc) then
  begin
    MakeCompass('random');
    if Random(10) = 5 then
      MakeCompass('n');
    Exit;
  end;

  gameTab(TAB_INV);

  if (LeaveDangerZone) then
    MSI_Debug('Left danger zone');

  Case HowLong Of
    0..2000:
     Case Random(3) Of
        0 : SleepAndMoveMouse(HowLong + Random(HowLong/10));
        1 : Begin
              RanTab := RandomRange(TAB_Combat, TAB_LogOut);
              GameTab(RanTab);
              Wait(HowLong + Random(HowLong/10));
              GameTab(tab_Inv);
            End;
        2 : RandomRClick;
      End;

    2001..5000:
      Case Random(4) Of
         0 : HoverSkill('Random', False);
         1 : PickUpMouse;
         2 : SleepAndMoveMouse(HowLong + Random(HowLong/10));
         3 : If Random(4) = 2 Then
             For I := 0 To Round(HowLong/800) Do
               If I Mod 2 = 0 Then ExamineInv;
       End;

    5001..10000:
      If Random(2) = 1 Then
        RandomMovement
      Else
        MSI_AntiBan(Round(HowLong/2) + Random(1000), 100);

    10001..20000:
      Case Random(3) Of
        0 : MSI_AntiBan(Round(HowLong/2) + Random(1000), 100);
        1 : BoredHuman;
        2 : RandomAngle(1);
      End;

    20001..999999:
      begin
        Time := GetSystemTime + HowLong;
        while (Time > GetSystemTime) do
        begin
          MSI_AntiBan(7000 + Random(200), 100);
          wait(random(5000));
        end;
      end;
  End;
End;

(*
MSI_LevelUp
~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_LevelUp();

Checks to see if the player has leveled up.  Calls SRL's LevelUp procedure.
Will increase the stats variable if the player is found to have gained a level.

.. note::

  | Author: Coh3n
  | Last Updated: 04 June 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_LevelUp();
*)
procedure MSI_LevelUp();
begin
  if (LevelUp) then
  begin
    MSI_SubDebug('MSI_LevelUp: Player has leveled up!');
    stats_IncVariable('Total Levels Gained', 1);
  end;
end;

(*
MSI_FindRandoms
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_FindRandoms(Force: Boolean);

Checks to see if the player has encountered a random event. Set 'Force' to true
to scan for randoms no matter what. By default, MSI waits a minimum of 15 seconds
in between randoms scans (changable by user in the script setup). This procedure
should ALWAYS be called exactly like in this example.

.. note::

  | Author: Coh3n
  | Last Updated: 04 May 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not FindObjects) then // Note that FindObjects is used only as an example
    if (MSI_FindRandoms(False)) then
      if (not LoggedIn) then
        Exit;
*)
function MSI_FindRandoms(Force: Boolean): Boolean;
var
  randomDone: boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_LevelUp();
  if (LeaveDangerZone) then
    MSI_SubDebug('Left danger zone');

  gameTab(TAB_INV);

  if (not Force) then
    if (NextRandCheck > GetSystemTime) then
      Exit;

  MSI_SubDebug('Scanning for randoms...');

  {$IFDEF REFLECTION}
  if (not ReflectionBroken) then
    randomDone := R_FindRandoms
  else
    randomDone := FindNormalRandoms;
  {$ELSE}
  randomDone := FindNormalRandoms;
  {$ENDIF}

  if (randomDone) then
  begin
    Result := True;
    MSI_SubDebug('MSI_FindRandoms: Finished Random Event!');
  end else
    if (not LoggedIn) then
    begin
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'Failed to solve random';
      Exit;
    end;

  NextRandCheck := GetSystemTime + MSI_SetupVars[SETUP_RANDOMS_WAIT];
end;

(*
MSI_NoMouseFindRandoms
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_NoMouseFindRandoms(force: boolean): boolean;

Checks to see if the player has encountered a random event. By default, MSI waits a minimum of 15 seconds
in between randoms scans (changable by user in the script setup).

.. note::

  | Author: Coh3n, FindNormalRandoms, & NCDS
  | Last Updated: 04 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not FindObjects) then // Note that FindObjects is used only as an example
    if MSI_NoMouseFindRandoms(true) then
      if (not LoggedIn) then
        Exit;
*)
function MSI_NoMouseFindRandoms(force: boolean): boolean;
{$IFNDEF REFLECTION}
var
  cont: boolean;
  i: integer;
{$ENDIF}
begin
  if (not LoggedIn) then
    Exit;

  MSI_LevelUp();

  if (not force) then
    if (nextRandCheck > getSystemTime) then
      exit;

  MSI_SubDebug('Scanning for randoms...');
  {$IFDEF REFLECTION}
    Result := R_SolveNonTalkingRandoms;
  {$ELSE}
    begin {Taken from SRL's FindNormalRandoms (mouse movements removed)}
      if (SRL_OnFindRandomCall <> nil) then
      begin;
        Result := SRL_OnFindRandomCall(cont);
        if not Cont then
          exit;
      end;
      for I := 1 to 6 do
      begin
        case I of
          1: Result := SolveTeleportRandoms;
          2: Respond;
          3: Result := FindDead;
          4: Result :=  RC;
          5: Result := FindMod;
          6: if (SRL_Procs[srl_OnRandomCall] <> nil) then
               SRL_Procs[srl_OnRandomCall]();

        end;
        if (Result) then
        begin
          if (SRL_Procs[srl_OnFindRandom] <> nil) then
            SRL_Procs[srl_OnFindRandom]();
          Break;
        end;
      end;
    end; //End SRL's Func.
  {$ENDIF}
  if Result then
    MSI_SubDebug('MSI_FindRandoms: Finished Random Event!')
  else
    if (not LoggedIn) then
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'Failed to solve random';

  NextRandCheck := GetSystemTime + MSI_SetupVars[SETUP_RANDOMS_WAIT];
end;

(*
MSI_WaitWhileResting
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitWhileResting: Boolean;

Simulates a "human-like" rest; returns true if the player's energy is
within the range of ENERGY_MIN and ENERGY_MAX (both constants are found
in Globals.simba)

.. note::

  | Author: NCDS
  | Last Updated: 03 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WaitWhileResting) then
    StartWalking;
*)
function MSI_WaitWhileResting: Boolean;
var
  x, y, cEnergy: Integer;
  t: string;
begin
  if (not LoggedIn) then
    Exit;

  cEnergy := getMMLevels('run', t);
  MSI_SubDebug('Current Energy: ' + intToStr(cEnergy));

  if (inRange(cEnergy, 0, 10)) then
  begin
    MSI_SubDebug('Resting..');
    if SetRest then
      case Random(75) of
        0..50:
          begin
            GetMousePos(x, y);
            if InRange(x, MSx1, MIx2) then
              if Random(2) = 1 then
                while (not (x > MIx2)) do
                  x := x + 20
              else
                while (not (x < MSx1)) do
                  x := x - 20;

            if InRange(y, MSy1, MIy2) then
              if Random(2) = 1 then
                while (not (y > MIy2)) do
                  y := y + 20
              else
                while (not (y < MSy1)) do
                  y := y - 20;

            MMouse(x, y, 0, 0);
          end;

        51..55:
          SleepAndMoveMouse(5000);

        56:
          ExamineInv;
      end;
  end;

  Result := setRun(true);
end;

