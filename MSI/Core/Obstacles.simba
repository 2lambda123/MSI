(*
Obstacles
=========

The Obstacles file includes all routines that are used to solve obstacles such
as climbing a ladder or climbing over a wall.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Obstacles.simba>`_.

*)

(*
MSI_GetObstacle
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetObstacle(obs: integer): TObstacle;

Returns a TObstacle record for the obstacle specified by 'obs'; 'obs' is a
constant that can be found in
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Globals.simba>`_ with the
prefix "OBS_".

.. note::

  | Author: The MSI Team
  | Last Updated: 20 July 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(OBS_LADDER_DOWN_MINE_GUILD);
    writeln('Loaded obstacle: '+obs.name);
  end;
*)
function MSI_GetObstacle(obs: integer): TObstacle;
begin
  case obs of
    OBS_LADDER_MG_DOWN:
      with result do
      begin
        Name     := 'OBS_LADDER_MG_DOWN';
        MirConst := OBS_LADDER_MG_UP;
        MirArea  := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        ObjConst := LADDER_MG_DOWN;
        ObjMir   := LADDER_MG_UP;
        Camera   := ['n', true];

        // West, South, East, North
        StartTiles := [Point(3017, 3339), Point(3019, 3337),
                       Point(3021, 3339), Point(3019, 3341)];

        EndTiles   := [Point(3017, 9739), Point(3019, 9737),
                       Point(3021, 9739), Point(3019, 9741)];
      end;

    OBS_LADDER_MG_UP:
      with result do
      begin
        Name     := 'OBS_LADDER_MG_UP';
        MirConst := OBS_LADDER_MG_DOWN;
        MirArea  := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        ObjConst := LADDER_MG_UP;
        ObjMir   := LADDER_MG_DOWN;
        Camera   := ['n', true];

        // West, South, East, North
        StartTiles := [Point(3017, 9739), Point(3019, 9737),
                       Point(3021, 9739), Point(3019, 9741)];

        EndTiles   := [Point(3017, 3339), Point(3019, 3337),
                       Point(3021, 3339), Point(3019, 3341)];
      end;

    OBS_WALL_FW:
      with result do
      begin
        Name       := 'OBS_WALL_FW';
        MirConst   := OBS_WALL_FW;
        MirArea    := intToBox(MSCX, MSY1, MSX2, MSY2); // Right half of MS
        ObjConst   := WALL_FW;
        ObjMir     := WALL_FW;
        Camera     := ['w', false];
        StartTiles := [Point(2940, 3355)];
        EndTiles   := [Point(2940, 3355)];
      end;
  end;

  result.constant := obs;
end;

(*
MSI_WaitForMirror
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitForMirror(obs: TObstacle): boolean;

Returns true when an obstacles 'mirror obstacle' has appeared. For example, if
we're climbing a ladder, the mirror obstacle would be the ladder climbing down.
If reflection is enabled, it will check to see if the player is on the end tile,
and return true if they are.

.. note::

  | Author: Sir R. Magician & Coh3n
  | Last Updated: 20 July 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);

    // clickObstacle isn't a real function, just an example
    if (clickObstacle(obs)) then
      result := MSI_WaitForMirror(obs);
  end;
*)
function MSI_WaitForMirror(obs: TObstacle): boolean;
var
  i, t, h: Integer;
  mPos: TPoint;
  colorFail: Boolean;
  mirObj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  t := (getSystemTime + (60000 * 3));
  h := high(obs.endTiles);

  repeat
    mirObj := MSI_GetObject(obs.objMir);
    mirObj.searchArea := obs.mirArea;

    {$IFDEF SMART}
    if (MSI_Settings[SETUP_DEBUG_SMART]) then
      SMART_DrawBoxEx(false, mirObj.searchArea, clBlue);
    {$ENDIF}

    if (MSI_FindObject(mirObj, moMove)) then
    begin
      MSI_SubDebug('Found mirror object: ' + mirObj.name);

      {$IFDEF REFLECTION}
      if (not reflectionBroken) then
      begin
        mPos := getMyPos();

        // loop through end tiles comparing to player's current tile
        for i := 0 to h do
          if (mPos = obs.endTiles[i]) then
          begin
            MSI_SubDebug('Player is on end tile');
            result := true;
            break;
          end else
            if (i = h) then
              colorFail := true;

        if (colorFail) then
          continue; // continue if reflection determines that color failed
      end;
      {$ENDIF}

      result := true;
    end;

    wait(randomRange(250, 500));
  until(result or (getSystemTime > t));
end;

(*
MSI_SolveObstacle
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SolveObstacle(obs: TObstacle): boolean;

Returns true if the obstacle 'obs' is solved. Uses MSI_FindObject to find and
click the obstacle, then calls MSI_WaitForMirror to determine when the obstacle
has been passed.

.. note::

  | Author: Coh3n
  | Last Updated: 20 July 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);
    result := MSI_SolveObstacle(obs);
  end;
*)
function MSI_SolveObstacle(obs: TObstacle): boolean;
var
  t: Integer;
  obsObj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_SolveObstacle');
  t := (getSystemTime + 60000);
  obsObj := MSI_GetObject(obs.objConst);

  if ((varType(obs.camera[0]) = varString) and (obs.camera[0] = 'n')) then
    clickNorth(obs.camera[1])
  else begin
    makeCompass(obs.camera[0]);
    setAngle(obs.camera[1]);
  end;

  while ((not result) and (getSystemTime < t)) do
    if (MSI_FindObject(obsObj, moLeft)) then
    begin
      wait(randomRange(1500, 2000));
      result := MSI_WaitForMirror(obs);
    end;

  clickNorth(true);
  MSI_CloseHeader('MSI_SolveObstacle: ' + boolToStr(result));
end;

