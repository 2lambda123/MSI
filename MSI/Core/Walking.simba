(*
Walking
=======

The Walking file includes functions & procedures that have anything to do with
walking. You'll notice the defines ({$IFDEF REFLECTION}) used throughout these
methods; these are used so MSI will still compile if the user decides to exclude
reflection or if reflection is broken. This file handles walking for both SPS
and reflection.

The source for Walking.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Walking.simba>`_.

*)

(*
MSI_Flag
~~~~~~~~

.. code-block:: pascal

  procedure MSI_Flag(FlagDist: Integer);

MSI's custom flag function. It waits until the flag is within 'FlagDist' from
the player. It also works if, for some reason, the flag has gone off the minimap,
but the player is still moving.

.. note::

  | Author: The MSI Team
  | Last Updated: 26 January 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WalkToPoint(MSI_GetWalkCoords(0))) then
    MSI_Flag(MIN_FLAG_DISTANCE); // MIN_FLAG_DISTANCE is found in Globals.simba
*)
procedure MSI_Flag(FlagDist: Integer);
var
  t: Integer;
begin
  if (not LoggedIn) then
    Exit;

  repeat
    if (LeaveDangerZone) then
      MSI_Debug('Left danger zone');

    Wait(RandomRange(200, 500));
    t := (GetSystemTime + 12000);

    // If the player is going around an obstacle and the flag goes off the minimap
    if ((not FlagPresent) and (IsMoving)) then
    begin
      MSI_Antiban(RandomRange(300, 1000), ANTI_BAN_CHANCE);
      Continue;
    end;

    if (FlagDistance <= FlagDist) or (not IsMoving) then
      Exit;

    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(200, 800), ANTI_BAN_CHANCE);

    MSI_SubDebug('Flag distance: '+IntToStr(FlagDistance));

  until((not (FlagPresent)) and (not (IsMoving))) or (t < GetSystemTime);
end;

(*
MSI_WaitTile
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitTile(Tile: TPoint): Boolean;

Simple, yet effective function used as a substitute for Flag functions.
MSI_WaitTile returns true with 'Tile' is on the minimap. See MSI_WalkTile to
see exactly how it's used.

.. note::

  | Author: Coh3n
  | Last Updated: 26 January 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickTile(i)) then
    MSI_WaitTile(i + 1); // Waits for the next tile in the path
*)
function MSI_WaitTile(Tile: TPoint): Boolean;
{$IFDEF REFLECTION}
var
  t: Integer;
{$ENDIF}
begin
  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  t := GetSystemTime + 15000; // Maximum wait time is 15 seconds
  repeat
    if (rs_GetCompassAngleDegrees <> 0.0) then
      clickNorth(true);

    if (LeaveDangerZone) then
      MSI_Debug('Left danger zone');

    Result := TileOnMM(Tile);

    MSI_WaitWhileResting;
    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(200, 800), ANTI_BAN_CHANCE);
    Wait(RandomRange(200, 500));
  until(Result or (GetSystemTime > t) or (not LoggedIn));
  {$ENDIF}
end;

(*
MSI_ClickTile
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ClickTile(Tile: TPoint): Boolean;

Checks to see if the player is near 'Tile', if so, returns true, otherwise it
will verify the tile is on the minimap and return true when clicked.

.. note::

  | Author: marpis
  | Last Updated: 27 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ClickTile(Point(1234, 4321))) then
    MSI_Debug('Clicked tile');
*)
function MSI_ClickTile(Tile: TPoint): Boolean;
{$IFDEF REFLECTION}
var
  MP: TPoint;
{$ENDIF}
begin
  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  MP := TileToMM(Tile);

  if (Distance(MP.X, MP.Y, MMCX, MMCY) <= 5) then
  begin
    MSI_Debug('Already near tile');
    Result := True;
    Exit;
  end;

  if (TileOnMM(Tile)) then
  begin
    MSI_Debug('Tile('+IntToStr(Tile.x)+', '+IntToStr(Tile.y)+') is on the minimap');
    MSI_MultiClickMouse(MP.X, MP.Y, 60, 4);
    Result := True;
    RunEnergy(20);
  end else
    MSI_Debug('Tile('+IntToStr(Tile.x)+', '+IntToStr(Tile.y)+') is not on the minimap');
  {$ENDIF}
end;

(*
MSI_PointOnMM
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_PointOnMM(p: TPoint; var Coord: TPoint): Boolean;

Returns try if the point, p, is on the minimap. P can be a tile or an SPS point.
The coordinates on the minimap are set to 'Coord'.

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_PointOnMM(Path[i], p)) then
    Mouse(p.x, p.y, 3, 3, True);
*)
function MSI_PointOnMM(p: TPoint; var Coord: TPoint): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  if (ReflectionBroken) then
    {$IFDEF SPS}
    Coord := SPS_PosToMM(p)
    {$ELSE}
    Wait(50)
    {$ENDIF}
  else
    {$IFDEF REFLECTION}
    Coord := TileToMM(p);
    {$ELSE}
    Wait(50);
    {$ENDIF}

  Result := rs_OnMinimap(Coord.x, Coord.y);
  MSI_SubDebug('MSI_PointOnMM'+ToStr(p)+': ' + BoolToStr(Result));
end;

(*
MSI_Relocate
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_Relocate(Loc: Integer): Boolean;

Relocates the player to the location 'Loc'.  Only relocates if the player is
near the location.  Returns true if relocation was successful.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 22 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_Relocate(LOC_VE_MINE)) then
    MSI_Debug('Successfully relocated');
*)
function MSI_Relocate(Loc: Integer): Boolean;
var
  i, t, cp: Integer;
  p: TPoint;
  TPA: TPointArray;
  atTile: boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_Relocate');

  if (ReflectionBroken) then
  begin
    TPA := MSI_Locations[Loc].Points
  end else
    TPA := MSI_Locations[Loc].Tiles;

  if (Length(TPA) = 0) then
  begin
    MSI_SubDebug('No relocation points for ' + MSI_Locations[Loc].Name);
    Exit;
  end;

  cp := MSI_Players[CurrentPlayer].CurrentPoint;
  if (cp = High(TPA)) then
  begin
    InvertTPA(TPA);
    cp := High(TPA) - cp;
  end;
  MSI_Players[CurrentPlayer].CurrentPoint := cp;

  t := (GetSystemTime + 10000);
  while (not Result) and (LoggedIn) and (GetSystemTime < t) do
  begin
    for i := cp to High(TPA) do
    begin
      if (not MSI_PointOnMM(TPA[i], p)) then
      begin
        if (MSI_FindRandoms(True)) then
        begin
          MSI_CloseHeader('MSI_Relocate: ' + boolToStr(result));
          result := true;
          exit;
        end;

        wait(RandomRange(200, 300));

        if ((i = high(TPA)) and (atTile)) then
        begin
          result := true;
          break;
        end else
          if (i = high(TPA)) then
            break;

        Continue;
      end;

      if (Distance(p.x, p.y, MMCX, MMCY) > MSI_Locations[Loc].MinDistance) then
      begin
        Mouse(p.x, p.y, 4, 4, True);
        MSI_Debug('Walking to Point(' + IntToStr(p.x) + ', ' + IntToStr(p.y) + ')');
        MSI_Flag(0);
        Result := True;
        Break;
      end else begin
        atTile := true;
        if (i = High(TPA)) then
        begin
          MSI_Debug('Already at ' + MSI_Locations[Loc].Name + ' Point('+IntToStr(i)+')');
          Result := True;
        end;
      end;
    end;

    if (not Result) then
      cp := 0
    else
      cp := i;
  end;

  if (not Result) then
  begin
    {$IFDEF REFLECTION}
    if (not ReflectionBroken) then
      if (Length(MSI_Locations[Loc].Points) > 0) then
      begin
        MSI_Debug('Trying r_WebWalk');
        Result := r_WebWalk(MSI_Locations[Loc].Points[0]);
      end;
    {$ENDIF}
  end;

  MSI_Players[CurrentPlayer].CurrentPoint := cp;
  MSI_CloseHeader('MSI_Relocate: ' + BoolToStr(Result));
end;

(*
MSI_AtLocation
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AtLocation(Loc: Integer; Relocate: Boolean): Boolean;

Returns true if the player is at the location 'Loc'.  Works with both reflection
and SPS. If the player isn't at the location and 'Relocate' is set to true,
will call MSI_Relocate.

.. note::

  | Author: Coh3n
  | Last Updated: 27 April 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_AtLocation(LOC_VE_BANK, True)) then
    MSI_Debug('We are at Varrock East Bank');
*)
function MSI_AtLocation(Loc: Integer; Relocate: Boolean): Boolean;
var
  i, d: Integer;
  p: TPoint;
  TPA: TPointArray;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_AtLocation');

  if (Loc = LOC_POWER_SKILL) then
  begin
    MSI_Debug('We are powerskilling, we have no specific location');
    Result := True;
  end;

  if (not Result) then
  begin
    if (ReflectionBroken) then
    begin
      TPA := MSI_Locations[Loc].Points
    end else
      TPA := MSI_Locations[Loc].Tiles;

    for i := 0 to High(TPA) do
    begin
      MSI_Debug('Checking Point: ' + ToStr(TPA[i]));

      if (MSI_PointOnMM(TPA[i], p)) then
      begin
        d := Distance(p.x, p.y, MMCX, MMCY);
        MSI_Debug('Distance from player to ' + MSI_Locations[Loc].Name + ': ' + IntToStr(d));

        Result := (d <= 30);
        if (not Result) and (Relocate) then
          Result := MSI_Relocate(Loc);

        if (Result) then
        begin
          MSI_Debug('Player is at ' + MSI_Locations[Loc].Name);
          MSI_Players[CurrentPlayer].Location := MSI_Locations[Loc].Constant;
          Break;
        end;
      end;
    end;
  end;

  if (not Result) then
    MSI_Debug('Player not at ' + MSI_Locations[Loc].Name);

  MSI_CloseHeader('MSI_AtLocation: ' + BoolToStr(Result));
end;

(*
MSI_LoadPath
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_LoadPath(sLoc, eLoc: Integer; Color: Boolean): T2DPointArray;

Loads either a reflection or color path depending on 'Color' boolean. Loads the
path from the starting location (sLoc) to the ending location (eLoc).

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_LoadPath(LOC_VE_BANK, LOC_VE_MINE, True); // Loads color path from VE Bank to VE Mine
*)
function MSI_LoadPath(sLoc, eLoc: Integer; Color: Boolean): T2DPointArray;
var
  Script: TScript;
  s: string;
begin
  if (not LoggedIn) then
    Exit;

  Script := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name];

  if (sLoc = Script.PathInfo.StartLoc) then
    if (Color) then
      Result := Script.PathInfo.Color
    else
      Result := Script.PathInfo.Reflection
  else
    if (sLoc = Script.PathInfo.EndLoc) then
      if (Color) then
        Result := MSI_MirrorATPA(Script.PathInfo.Color)
      else
        Result := MSI_MirrorATPA(Script.PathInfo.Reflection);

  if (Color) then
    s := 'Color'
  else
    s := 'Reflection';

  MSI_SubDebug('Loaded Path (' + s + '): '+ToStr(Result));
end;

(*
MSI_WalkColorPath
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkColorPath(Points: TPointArray): Boolean;

Uses SPS's path walking to walk the path specified by 'Points'.  Each script's
path is defined with the script's record in Scripts.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  with MSI_Players[CurrentPlayer] do
    MSI_WalkColorPath(Scripts[CurrentScript].PathInfo.Color);
*)
function MSI_WalkColorPath(Points: TPointArray): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  {$IFDEF SPS}
  Result := SPS_WalkPath(Points);
  {$ENDIF}
end;

(*
MSI_WalkTilePath
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkTilePath(tPath: TPointArray): Boolean;

Walks the entire tile path (tPath). Uses MSI_WaitTile for every tile except the
last one (uses MSI_Flag(0) instead) to ensure the player has stopped moving
before searching for objects on the mainscreen.

.. note::

  | Author: marpis & Coh3n
  | Last Updated: 26 January 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_WalkTilePath(TilePathHere)) then
    MSI_Debug('Walked path');
*)
function MSI_WalkTilePath(tPath: TPointArray): Boolean;
{$IFDEF REFLECTION}
var
  h, i, t: Integer;
  mPos: TPoint;
  stopMoving: Boolean;
{$ENDIF}
begin
  if (not LoggedIn) then
    Exit;

  {$IFDEF REFLECTION}
  with MSI_Players[CurrentPlayer] do
  begin
    t := GetSystemTime + (Length(tPath) * 60 + 180) * 1000; // A minute for each tile + 3 minutes
    h := High(tPath);

    repeat
      for i := h downto 0 do
      begin
        stopMoving := (i = h);

        if (not MSI_ClickTile(tPath[i])) then
        begin
          if (i = 0) then
            Exit;

          Continue;
        end else
          if (stopMoving) then
            MSI_Flag(0)
          else
            MSI_WaitTile(tPath[i + 1]);

        mPos := GetMyPos;
        Result := (Distance(mPos.x, mPos.y, tPath[h].x, tPath[h].y) <= 10);
        Break;
      end;
    until(Result or (GetSystemTime > t));
  end;
  {$ENDIF}
end;

(*
MSI_WalkPath
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WalkPath(sLoc, eLoc: Integer): Boolean;

Walks the entire path from start (sLoc) to finish (eLoc), including obstacles.
Returns true if the player is at the ending location.

.. note::

  | Author: marpis & Coh3n
  | Last Updated: 27 February 2011 by Coh3n

Example:

.. code-block:: pascal

  // Walks to VE mine only if your player is set to use SCRIPT_VE_MINER
  MSI_WalkPath(LOC_VE_BANK, LOC_VE_MINE);
*)
function MSI_WalkPath(sLoc, eLoc: Integer): Boolean;
var
  ATPA: T2DPointArray;
  eTPA: TPointArray;
  Walked: function(TPA: TPointArray): Boolean;
  i, t, h, obsLen: Integer;
  Script: TScript;
  obsSolved: TBooleanArray;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_WalkPath');

  Script := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name];
  SetLength(obsSolved, Length(Script.PathInfo.Obstacles));

  if (ReflectionBroken) then
  begin
    ATPA := MSI_LoadPath(sLoc, eLoc, True);
    eTPA := MSI_MirrorTPA(MSI_Locations[Script.PathInfo.EndLoc].Points);
    Walked := @MSI_WalkColorPath;
  end else begin
    ATPA := MSI_LoadPath(sLoc, eLoc, False);
    eTPA := MSI_MirrorTPA(MSI_Locations[Script.PathInfo.EndLoc].Tiles);
    Walked := @MSI_WalkTilePath;
  end;

  t := (GetSystemTime + (Length(ATPA) * 60 + 180) * 1000);
  obsLen := High(Script.PathInfo.Obstacles);

  if not RunEnergy(20) then
  begin
    RestUntil(40+Random(20));
    SetRun(true);
  end;

	repeat
		for i := 0 to High(ATPA) do
      with MSI_Players[CurrentPlayer] do
		  begin
        // Walk the leg of the path
				if (not (Walked(ATPA[i]))) then
          if (not (Walked(eTPA))) and (not (Walked(ATPA[i]))) then
				  begin
            MSI_Debug('Failed to walk leg '+IntToStr(i)+' of script: '+Capitalize(Script.Name));
				    ReportInfo.FalseReason := 'Failed to walk to ' + MSI_Locations[eLoc].Name;
            MSI_CloseHeader('MSI_WalkPath: ' + BoolToStr(Result));
				    Location := LOC_LOST;
            Exit;
				  end;

        // Handle the obstacle
		    if (MSI_HandleObstacle(Script, sLoc, h)) then
        begin
          obsSolved[h] := True;
		      if (h <> obsLen) then
		        Inc(h);
        end;

        // Return true if the player is at the ending location
		    if (MSI_AtLocation(eLoc, True)) then
		    begin
		      Result := True;
		      Break;
		    end;
		  end;
	until(Result or (GetSystemTime > t));

	MSI_CloseHeader('MSI_WalkPath: ' + BoolToStr(Result));
end;

(*
MSI_PerformWalk
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_PerformWalk(startLoc, endLoc: Integer): Boolean;

This is the function that is called in MSI_Walk (Mainloop.simba). It takes into
consideration both color and reflection paths depending on the user's preference
as well as the current state of reflection.

.. note::

  | Author: Coh3n
  | Last Updated: 18 May 2011 by Coh3n

Example:

.. code-block:: pascal

  // Walks to VE mine only if your player is set to use SCRIPT_VE_MINER
  MSI_PerformWalk(LOC_VE_BANK, LOC_VE_MINE);
*)
function MSI_PerformWalk(startLoc, endLoc: Integer): Boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_FindRandoms(true);
  Result := MSI_WalkPath(startLoc, endLoc);
end;

