function MSI_SetupRecipe(which : Integer): TMaterial;
begin
  case which of
    MATERIAL_CRAYFISH:
      with Result do
      begin
        Name        := 'Crayfish';
        Supplies    := [TIntegerArray([FISH_RAW_CRAYFISH, -1])];
        Produces    := [FISH_COOKED_CRAYFISH];
        MemberOnly  := False;
        Level       := 1;
      end;

    MATERIAL_SHRIMP:
      with Result do
      begin
        Name        := 'Shrimp';
        Supplies    := [TIntegerArray([FISH_RAW_SHRIMP, -1])];
        Produces    := [FISH_COOKED_SHRIMP];
        MemberOnly  := False;
        Level       := 1;
      end;

    MATERIAL_SARDINE:
      with Result do
      begin
        Name        := 'Sardine';
        Supplies    := [TIntegerArray([FISH_RAW_SARDINE, -1])];
        Produces    := [FISH_COOKED_SARDINE];
        MemberOnly  := False;
        Level       := 1;
      end;

    MATERIAL_ANCHOVIE:
      with Result do
      begin
        Name        := 'Anchovies';
        Supplies    := [TIntegerArray([FISH_RAW_ANCHOVIE, -1])];
        Produces    := [FISH_COOKED_ANCHOVIE];
        MemberOnly  := False;
        Level       := 1;
      end;

    MATERIAL_HERRING:
      with Result do
      begin
        Name        := 'Herring';
        Supplies    := [TIntegerArray([FISH_RAW_HERRING, -1])];
        Produces    := [FISH_COOKED_HERRING];
        MemberOnly  := False;
        Level       := 5;
      end;

    MATERIAL_TROUT:
      with Result do
      begin
        Name        := 'Trout';
        Supplies    := [TIntegerArray([FISH_RAW_TROUT, -1])];
        Produces    := [FISH_COOKED_TROUT];
        MemberOnly  := False;
        Level       := 15;
      end;

    MATERIAL_PIKE:
      with Result do
      begin
        Name        := 'Pike';
        Supplies    := [TIntegerArray([FISH_RAW_PIKE, -1])];
        Produces    := [FISH_COOKED_PIKE];
        MemberOnly  := False;
        Level       := 20;
      end;

    MATERIAL_SALMON:
      with Result do
      begin
        Name        := 'Salmon';
        Supplies    := [TIntegerArray([FISH_RAW_SALMON, -1])];
        Produces    := [FISH_COOKED_SALMON];
        MemberOnly  := False;
        Level       := 25;
      end;

    MATERIAL_TUNA:
      with Result do
      begin
        Name        := 'Tuna';
        Supplies    := [TIntegerArray([FISH_RAW_TUNA, -1])];
        Produces    := [FISH_COOKED_TUNA];
        MemberOnly  := False;
        Level       := 30;
      end;

    MATERIAL_LOBSTER:
      with Result do
      begin
        Name        := 'Lobster';
        Supplies    := [TIntegerArray([FISH_RAW_LOBSTER, -1])];
        Produces    := [FISH_COOKED_LOBSTER];
        MemberOnly  := False;
        Level       := 40;
      end;

    MATERIAL_SWORDFISH:
      with Result do
      begin
        Name        := 'Swordfish';
        Supplies    := [TIntegerArray([FISH_RAW_SWORDFISH, -1])];
        Produces    := [FISH_COOKED_SWORDFISH];
        MemberOnly  := False;
        Level       := 45;
      end;
  end;
end;

function MSI_SetupRecipes(Start, Finish : Integer) : Boolean;
var
  I: Integer;
begin
  for I := Start to Finish do
    MSI_Materials[I] := MSI_SetupRecipe(I);
  Result := True;
end;

function MSI_SetupCooking : Boolean;
var
  i, h, L: Integer;
begin
  if (not LoggedIn) then
    Exit;
  MSI_AddHeader('MSI_SetupCooking');

  h := High(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials);
  L := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[0];
  for i := L to MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[h] do
  begin
    if (not InIntArray(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials, i)) then
      Continue; // if on an 'in between' Material then skip it

    MSI_Materials[i] := MSI_SetupRecipe(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[i-L]);
    Result := True;
  end;

  MSI_CloseHeader('MSI_SetupCooking: ' + BoolToStr(Result));
end;

function MSI_WaitWhileCooking(WhichRecipe : Integer) : Boolean;
var
 Timeout : Integer;
 iArr: TPointArray;
begin
  if (not LoggedIn) then
    Exit;
  MSI_AddHeader('MSI_WaitWhileCooking');

  Timeout := GetSystemTime + 180000;
  while (GetSystemTime < Timeout) do
  begin
    Result := (CountItems('dtm', MSI_Items[MSI_Materials[WhichRecipe].Supplies[0][0]].DTM, [DTM_TOLERANCE]) = 0);

    if Result then
      Break;

    MSI_FindRandoms(False);
    MSI_AntiBan(RandomRange(0, 7000), ANTI_BAN_CHANCE);

    Wait(1000);
  end;
  MSI_CloseHeader('MSI_WaitWhileCooking: '+BoolToStr(Result)+';');
end;

function MSI_CookAll(WhichRecipe: Integer): Boolean;
var
  x, y, t, i: Integer;
begin
  if (not LoggedIn) then
    Exit;

  if WaitFunc(@MSI_CB_DoAllScreen, 50, 5000) then
  begin
    t := (GetSystemTime + 10000);
    for i := 0 to High(MSI_Materials[WhichRecipe].Supplies) do
    begin
      if (t <= GetSystemTime) or ((i > 0) and (not MSI_CB_DoAllScreen)) then
      begin
        MSI_SubDebug('MSI_CookAll: Failed to find DTM in Chat box.');
        Exit;
      end;
      if (FindDTM(MSI_Items[MSI_Materials[WhichRecipe].Supplies[i][0]].DTM, x, y, MCx1, MCy1, MCx2, MCy2)) then
      begin
        MMouse(x, y, -25, 25);
        Result := WaitUpTextMulti(['ook A', 'k All', 'ook', 'll'], 2000);
      end;
      if Result then
        Break;
    end;
  end;

  if Result then
  begin
    GetMousePos(x, y);
    Mouse(x, y, 0, 0, True);
  end else begin
    MSI_SubDebug('MSI_CookAll: Failed to select option.');
    Exit;
  end;

  t := (GetSystemTime + 5000);
  while MSI_CB_DoAllScreen and (t > GetSystemTime) do
    Wait(50);

  Result := (not MSI_CB_DoAllScreen);
end;

function MSI_CookFood(WhichRecipe : Integer) : Boolean;
var
  TimeOut, x, y: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_CookFood');

  TimeOut := GetSystemTime + Round(60*1000*2.5);
  repeat
    if (not FindColor(x, y, SRL_OUTLINE_WHITE, MIX1, MIY1, MIX2, MIY2)) then
      if not MSI_ClickItem(MSI_Materials[WhichRecipe].Supplies[0][0], ['Use', 'se']) then
        MSI_Debug('Somehow, we failed to click the '+MSI_Materials[WhichRecipe].Name+'!');

    if MSI_FindObject(MSI_Players[CurrentPlayer].Scripts[CurrentScript].CookingSpot[CurrentScript], clickLeft) then
    begin
      MSI_CookAll(WhichRecipe);
      Result := MSI_WaitWhileCooking(WhichRecipe);
    end;
  until(Result or (GetSystemTime > TimeOut) or (not (LoggedIn)));

  MSI_CloseHeader('MSI_CookFood: ' + BoolToStr(Result));
end;

function MSI_CookFullInv : Boolean;
var
  i: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_Relocate(MSI_Players[CurrentPlayer].Location);
  for i := 0 to High(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials) do
  begin
    if (MSI_Players[CurrentPlayer].ReportInfo.SkillLevels[CurrentScript] < MSI_Materials[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[i]].Level) then
    begin
      MSI_Debug('Not high enough level(' + IntToStr(MSI_Players[CurrentPlayer].ReportInfo.SkillLevels[SKILL_COOKING]) + ') to cook this recipe(' +MSI_Materials[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[i]].Name+ ')!');
      Continue;
    end;
    Result := MSI_CookFood(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Materials[i]);
    if Result then
      Break;
  end;

  if Result then
  begin
    MSI_AddToProggy(PROG_ADD_LOADS, -1, -1, -1);
    stats_IncVariable('Times Banked', 1);
    stats_Commit;
    MSI_Players[CurrentPlayer].Location := MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].PathInfo.EndLoc;
  end;
end;
