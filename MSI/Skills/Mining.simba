(*
Mining
======

The Mining file holds any functions or procedures that are specific to the
Mining skill.

*)

const
  SIZE_MULTIPLIER = 1.25;
  ROCK_MAX_DIST   = 40;

(*
MSI_SetupMining
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupMining(): Boolean;

Returns true if the player has been properly setup for mining.  Only calls
MSI_SetupWoodcutting to avoid at lot of repeated code and for easier updating.
This is the function that is set to the PlayerSetup pointer in the TScript type.

.. note::

  | Author: Coh3n
  | Last Updated: 06 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_MINER].PlayerSetup := @MSI_SetupMining();
*)
function MSI_SetupMining(): Boolean;
begin
  Result := MSI_SetupWoodcutting(); // To avoid unnecessary repeated code
end;

(*
MSI_WaitWhileMining
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_WaitWhileMining(RockID: Integer);

Waits while the player is mining.  Performs several failsafe checks such as
tracking the colors found on the rock being mined, inventory count, animations,
and timing out.

.. note::

  | Author: Coh3n
  | Last Updated: 20 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_FindObjectsIn([ROCK_IRON, ROCK_TIN], Index, MSBox, ClickLeft)) then
    MSI_WaitWhileMining();
*)
Procedure MSI_WaitWhileMining(RockID: integer);
var
  cts, OldInvCount, t, d, RockColorCount: Integer;
  Arr, TPA: TPointArray;
  SearchBox: TBox;
begin
  if (not LoggedIn) then
    Exit;

  Flag;
  Wait(RandomRange(285, 450));

  if InvFull then
    Exit;

  MSI_AddHeader('MSI_WaitWhileMining');
  cts := GetColorToleranceSpeed;

  SetColorToleranceSpeed(2);
  SetToleranceSpeed2Modifiers(MSI_Objects[RockID].Hue, MSI_Objects[RockID].Sat);

  t := (GetSystemTime + MSI_Objects[RockID].MaxTime + Random(5000));

  SearchBox := IntToBox(
                       MSI_Objects[RockID].X - Round(MSI_Objects[RockID].W * SIZE_MULTIPLIER),
                       MSI_Objects[RockID].Y - Round(MSI_Objects[RockID].H * SIZE_MULTIPLIER),
                       MSI_Objects[RockID].X + Round(MSI_Objects[RockID].W * SIZE_MULTIPLIER),
                       MSI_Objects[RockID].Y + Round(MSI_Objects[RockID].H * SIZE_MULTIPLIER));

  if (MSI_SetupVars[SETUP_DEBUG_SMART]) then
    SMART_DrawBoxEx(True, SearchBox, clBlue);

  TPA := TPAFromBox(SearchBox);
  sortTPAFrom(TPA, point(MSCX, MSCY));

  if (length(TPA) > 0) then
  begin
    d := distance(TPA[0].x, TPA[0].y, MSCX, MSCY);
    MSI_Debug('Distance from tracking box to player = '+intToStr(d));

    if (d > ROCK_MAX_DIST) then
    begin
      MSI_Debug('Track box too far from player');
      MSI_CloseHeader('MSI_WaitWhileMining: Finished');
      exit;
    end;
  end;

  OldInvCount := InvCount;
  MSI_Debug('InvCount: ' + IntToStr(OldInvCount));

  {preparing variables to detect when rock is gone through color}
  FindColorsTolerance(Arr, MSI_Objects[RockID].Colors[0], SearchBox.x1,
                        SearchBox.y1, SearchBox.x2, SearchBox.y2, MSI_Objects[RockID].Tol);

  RockColorCount := Length(Arr);
  {done}

  repeat
    MSI_FindRandoms(False);

    FindColorsTolerance(Arr, MSI_Objects[RockID].Colors[0], SearchBox.x1,
                        SearchBox.y1, SearchBox.x2, SearchBox.y2, MSI_Objects[RockID].Tol);

    if (MSI_SetupVars[SETUP_DEBUG_SMART]) then
      SMART_DrawDotsEx(False, Arr, clYellow);

    if (Length(Arr) < MSI_Objects[RockID].Accuracy) then
    begin
      MSI_Debug('Colours found < Accuracy');
      Break;
    end;

    if (Length(Arr) < Round(RockColorCount * 0.50)) then
    begin
      MSI_Debug('Rock Gone, not enough points');
      Break;
    end;

    MSI_AntiBan(RandomRange(0, 3000), ANTI_BAN_CHANCE);

    if (OldInvCount < InvCount) then
    begin
      MSI_Debug('OldInvCount < InvCount');
      Break;
    end;

    if FindChatBoxText('manage to mine', 8, clMessage) then
    begin
      MSI_Debug('Found Text');
      Break;
    end;

    Wait(RandomRange(100, 300));

    if (t < GetSystemTime) then
    begin
      MSI_Debug('Took too long');
      break;
    end;

  until((not LoggedIn));

  MSI_CloseHeader('MSI_WaitWhileMining: Finished');

  SetColorToleranceSpeed(cts);
  SetColorSpeed2Modifiers(0.2, 0.2);
end;

(*
MSI_MineRock
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_MineRock(Which: TIntegerArray; var ForceFail: Boolean): Boolean;

Mines the rocks in the array 'Which'.  Will look for the first one in the array
first.  'ForceFail' is used to purposely make the function fail if for some
reason the pickaxe can't be found or the player is unable to mine the rock.

.. note::

  | Author: marpis
  | Last Updated: 11 July 2010 by NCDS

Example:

.. code-block:: pascal

  if (MSI_MineRock([ROCK_IRON, ROCK_SILVER], fail)) then
    if (not fail) then
      MSI_Debug('Mined rock');
*)
function MSI_MineRock(Which: TIntegerArray; var ForceFail: Boolean): Boolean;
var
  Index: integer;
begin
  if (not LoggedIn) then
    Exit;

  if MSI_FindObjectsIn(Which, Index, MSBox, ClickLeft) then
  begin
    Result := True;
    MSI_WaitWhileMining(Which[Index]);
  end else
    MSI_FindRandoms(False);
end;

(*
MSI_MineInvFull
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_MineInvFull: Boolean;

Mines rocks until the inventory is full.  This is the function that is pointed
to a scripts 'AutoObjects' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_VE_MINER].AutoObjects := @MSI_MineInvFull;
*)
function MSI_MineInvFull: Boolean;
begin
  Result := MSI_AutoInvFull(@MSI_MineRock); // MSI_AutoInvFull in Skills.simba
end;


